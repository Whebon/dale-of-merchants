import math
import matplotlib.pyplot as plt
import numpy as np

CARD_WIDTH = 121

MAXIMUM_ARC = 10
MAXIMUM_DEFLECTION = CARD_WIDTH/10

HOVER_SCALE = 1.1
HOVER_TRANSLATE_Y = 10

xs=[]
ys=[]

def generate_css(num_cards):
    css = []

    css.append(f"\t/* ----------------------------- */")
    css.append(f"\t/* --- <GENERATED BY PYTHON> --- */")
    css.append(f"\t/* ----------------------------- */")
    css.append("")

    for n in range(1, num_cards + 1):
        css.append(f"\t/* {n} cards */")

        xs.append([])
        ys.append([])

        width = CARD_WIDTH * (n - 1)
        arc = min(MAXIMUM_ARC, math.degrees(2*(math.pi - 2 * math.atan(width / (2 * MAXIMUM_DEFLECTION)))))
        print(math.degrees(math.pi - 2 * math.atan((n - 1) / (2 * MAXIMUM_DEFLECTION))))
        print(arc)
        radius = width / (2 * math.sin(math.radians(arc / 2)))
        y0 = math.sqrt(radius ** 2 - (width/2)**2)

        for i in range(n):
            # rotate = f"calc(var(--deg-min) + {i - 1}deg * var(--full) / {n - 1})"
            # translate_y = f"{-6 - (n - 2) * 2}px" if (i == 0 or i == n) else "0px"
            rotate = arc*(i/(n-1) - 1/2) if n > 1 else 0
            translate_y = math.sqrt(radius**2 - (i*CARD_WIDTH - width/2)**2) - y0
            css.append(f"\t.dale-card[data-arc=\"{i+1}/{n}\"] {{")
            # css.append(f"\t\ttransition: transform 1s ease;")
            css.append(f"\t\ttransform: rotate({rotate}deg) translateY(-{round(translate_y)}px);")
            # css.append(f"\t\t&:hover {{ ")
            # css.append(f"\t\t\ttransition: transform 0.3s ease;")
            # css.append(f"\t\t\ttransform: scale({HOVER_SCALE}) rotate({rotate}deg) translateY(-{round(translate_y+HOVER_TRANSLATE_Y)}px);")
            # css.append(f"\t\t}}")
            css.append(f"\t}}")
            css.append("")
            xs[-1].append(((num_cards-n)/2+i)*CARD_WIDTH)
            ys[-1].append(translate_y)

    css.append(f"\t/* ------------------------------ */")
    css.append(f"\t/* --- </GENERATED BY PYTHON> --- */")
    css.append(f"\t/* ------------------------------ */")

    return "\n".join(css)


num_cards = 12  # Set this to the number of cards you want
css_output = generate_css(num_cards)

with open('generated_arc_styles.css', 'w') as file:
    file.write(css_output)

print("CSS has been generated and saved to 'generated_arc_styles.css'.")

colors = plt.get_cmap('tab10')(np.linspace(0, 1, len(ys)))
for (_xs, _ys, _col) in zip(xs, ys, colors):
    plt.plot(_xs, _ys, color=_col)
plt.xlabel("total card width")
plt.ylabel("deflection")
plt.savefig("noahsark.jpg")
plt.show()
